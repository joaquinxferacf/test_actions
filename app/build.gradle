plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.appdistribution'

}

def githubRunNumber = System.getenv('GITHUB_RUN_NUMBER') ?: ""

def getVersionProps = {
    def versionPropsFile = file("$project.rootDir/version.properties")
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    return versionProps
}

def getVersionCode = {
    return  (githubRunNumber.isEmpty()) ? 1 : githubRunNumber.toInteger() + 40
}

def getVersionName = {
    def versionProps = getVersionProps()
    def major = versionProps['majorVersion']
    def minor = versionProps['minorVersion']
    def patch = versionProps['patchVersion']
    return "${major}.${minor}.${patch}"
}

android {
    namespace 'com.example.testuploadgradlefirebase'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.testuploadgradlefirebase"
        minSdk 24
        targetSdk 33
        buildConfigField 'int', 'VERSION_CODE', "${getVersionCode()}"
        buildConfigField 'String', 'VERSION_NAME', "\"${getVersionName()}\""
        versionCode getVersionCode()
        versionName getVersionName()
        setProperty("archivesBaseName", "AppActions_${versionName}_${versionCode}")


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        release {

//            def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
//            def allFilesFromDir = new File(tmpFilePath).listFiles()
//
//            if (allFilesFromDir != null) {
//                def keystoreFile = allFilesFromDir.first()
//                keystoreFile.renameTo("$rootProject.projectDir/keystore/keystore.jks")
//            }

            storeFile file("$rootProject.projectDir/keystore/keystore.jks")
            storePassword System.getenv("SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            firebaseAppDistribution {
                appId "com.example.testuploadgradlefirebase"
                artifactType "AAB"
                releaseNotesFile = "changelog.txt"
                testers = "joaquin@money-go.es"
                serviceCredentialsFile = "test-gradle-upload-actions-37db670e4b2e.json"
            }
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    implementation platform('com.google.firebase:firebase-bom:30.4.1')
}
